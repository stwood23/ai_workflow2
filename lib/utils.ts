/**
 * @description
 * This module provides utility functions used throughout the application.
 *
 * Key features:
 * - cn: Merges Tailwind CSS classes conditionally and without conflicts.
 *
 * @dependencies
 * - clsx: Library for constructing className strings conditionally.
 * - tailwind-merge: Utility function to merge Tailwind CSS classes without style conflicts.
 * - marked: Library for parsing Markdown to HTML.
 *
 * @notes
 * - The `cn` function is commonly used in Shadcn UI components.
 */

import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"
import { marked } from "marked"

/**
 * Merges multiple class names or class name arrays into a single string,
 * resolving Tailwind CSS class conflicts intelligently.
 *
 * @param inputs - A list of class values (strings, arrays, or objects).
 * @returns A string of combined and de-duplicated class names.
 */
export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

/**
 * Converts a Markdown string to an HTML string using the 'marked' library.
 * Handles basic Markdown syntax like headings, bold, lists, etc.
 * @param markdown The input Markdown string.
 * @returns An HTML string representation of the Markdown.
 */
export async function convertMarkdownToHtml(markdown: string): Promise<string> {
  if (!markdown) return "<p></p>" // Return empty paragraph if input is empty

  // Configure marked to preserve line breaks and use GitHub Flavored Markdown
  marked.setOptions({
    gfm: true, // Use GitHub Flavored Markdown (better list/task list handling)
    breaks: true // Treat single newlines as <br>
    // mangle: false, // Removed: Option deprecated/not in standard types
    // headerIds: false // Removed: Option not in standard types
  })

  // Use marked to parse the markdown string
  // marked.parse is synchronous if async: false is set or no async extensions are used.
  // However, keeping await for potential future compatibility/extensions.
  const html = await marked.parse(markdown.trim())

  // Basic cleanup: Remove potentially empty paragraphs sometimes generated by parsers
  // Note: More robust sanitization might be needed depending on the source of the markdown
  return html.replace(/<p><\/p>/g, "")
}

/*
<ai_context>
Contains utility functions for the application.
</ai_context>
*/
